#!/bin/bash
# This script is under license BEER-WARE
# "THE BEER-WARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal

#shopt -s extglob

sourcing(){
	
	local list
	
	for list in /usr/lib/obarun/common_functions /etc/obarun/pacopts.conf; do
		if [[ -f "${list}" ]]; then
			source "${list}"
		else
			echo_error " Missing file : ${list}"
			exit	
		fi
	done
	
	unset list
}
#sourcing

COWER_CONFIG="$HOME/.config/cower/config"

## 		common functions

usage(){
	cat << EOF
	
${bold}Usage: ${0} [options] [args]${reset}

${bold}options:${reset}
    
    origin : check origin of packages
    applysys : wrap up a sysusers file 
    applytmp : wrap up all tmpfiles
    aur : manage package from AUR repositories
    
${bold}args :${reset}
    
    for origin :
        give the name of the repo to check.
        if an empty value is detected,
        obarun is picked by default.
	
    for applysys :
        name of the file to parse.
        can be a list e.g. "nbd.conf qemu.conf"
    
    for applytmp :
        this option do not accept any args.
        
    for	aur :
        this option do not accept any args.
EOF
	exit 0
}

##			ORIGIN FUNCTIONS

# ${1} name of the repos to use
find_origin(){
	local ori check ver repo_origin parse_ori parse_ori_repo parse_ori_name parse_ori_version
	
	repo_origin="${1}"
	
	for check in ${both[@]};do 
		
		if [[ "$check" != obarun-@(mkiso|install|build) ]]; then
		
			printf "\r${bold}     -> Check %s package${reset}" "$check"
			tput el #return to the last line
		
			while read ori; do
			
				parse_ori=${ori}
				
				#retrieve only the repo
				parse_ori_repo=${parse_ori%%/*}
			
				# retrieve only the name
				parse_ori_name=${parse_ori##*/}
				parse_ori_name=${parse_ori_name%%' '*}
				
				#retrieve only the version
				#if the value not return a version format then the package do not come from $repo_origin
				if [[ "${parse_ori_name}" == "$check" ]]; then ## avoid search regex on packages description
					parse_ori_version=${parse_ori##*[}
					ver=$(grep ":" <<< "${parse_ori_version}")
					
					if [[ -n "${ver}" ]];then
						parse_ori_version=${parse_ori_version##*' '}
						parse_ori_version=${parse_ori_version%%]*}
					else
						unset parse_ori_version
					fi
					unset ver
				fi
				
				check_var(){
					printf "\n"
					echo ori :: ${ori}
					echo parse_ori :: ${parse_ori}
					echo parse_ori_repo :: ${parse_ori_repo%%/}
					echo parse_ori_name :: ${parse_ori_name}
					echo ver :: ${ver}
					echo parse_ori_version :: ${parse_ori_version}
				}
				#check_var
				
				# version is not empty, the package installed do not come from $repo_origin
				if [[ -n $parse_ori_version ]]; then
					false+=("$check")
				fi
				
				unset parse_ori parse_ori_repo parse_ori_name parse_ori_version
			
			done < <(pacman -Ss "$check" | grep "${repo_origin}")
		fi
	done
	 
	printf "\n${bold}==>> Finished ${reset}\n"

	unset ori check ver repo_origin parse_ori parse_ori_repo parse_ori_name parse_ori_version
}

# ${1} name of the repos to use
# if empty, obarun is set by default
check_package(){
	
	local named item repo
	local -a both false repo_db
	
	# pick obarun by default
	repo="${1:-obarun}"
	
	mapfile -t repo_db < <(pacman -Slq "${repo}")
	
	# FILTER : Compare list of $installed package and $repo database,
	# if exist on twice put it on $both array
		
	while read named;do 
		for item in ${repo_db[@]}; do #$(pacman -Slq obarun)
			if  [[ "$named" == "$item" ]]; then 
				both+=("$item")
			fi
		done
	done < <(pacman -Qsq)
	
	echo_display " Verifying ${repo} packages repository"
	
	#check origin of package
	find_origin "${repo}"
	
	if ! [[ -z "${false[@]}" ]]; then 
		printf "${byellow}==>> These/those package(s) do not come from ${repo} repository :${reset}\n" 
		for no in "${false[@]}"; do
			echo_bold "	-> $no"
		done
		echo_display " Do you want to replace this/those package(s) [y|n]"
		reply_answer
		if (( ! $? )); then
			for i in "${false[@]}"; do
				pacman -S "${repo}"/$i
			done
		fi
	fi
	
	unset named item repo both false repo_db
}



##				SYSUSERS FUNCTION

# ${1} path to the file
# ${2} file to parse, can be a list e.g. "nbd.conf quemu.conf"
parse_file(){
	
	local tidy_loop path_file check parse_check
	local -a named
	
	path_file="${1}"
	named=( "${2}" )
	
	for tidy_loop in ${path_file}/${named[@]}; do
		
		tidy_loop=${tidy_loop##*/}

		while read check; do
	
			while read -d " " parse_check;do 
				case $parse_check in 
					u|g|m|r)
						parse_line "${parse_check}" "${check} "
						;;
					*) continue ;;
				esac
			done <<< "${check}"
	
		done < "${path_file}/${tidy_loop}"
	
	done 
	
	unset named tidy_loop path_file check parse_check
}

# {1} sysusers options : mean u,g,m or r
# {2} complete line to parse
parse_line(){
	 
	opts="${1}"
	line="${2}"
	
	case "${opts}" in
		u) 	line_u		
			;;
		g) 	line_g
			;;
		m) 	line_m
			;;
		r)	line_r
			;;
	esac	
	
	
}

# {1} line to parse
check_args(){
	
	local what element
	what="${1}"

	while read -d " " element; do
		case "${element}" in
			u|g|r) continue 
					;;
			m) 	named_g=$(awk -F " " '{print $2 }' <<< ${what})
				group_g=$(awk -F " " '{print $3 }' <<< ${what})
				;;	
			\"*) comment_=$(awk -F "\"*\"" '{ print $2 }' <<< ${what})
				;;
			*[0-9])
				uidgid="${element}"		
				;;
			/*)
				directory_="${element}"
				;;
			-) 	continue
				;;
			*\") continue
				;;
			*[a-z]|*[A-z])
				echo ${what} | awk -F "${element}" '{ print $1 }' | grep \" &>/dev/null
				if [[ $? -eq 0 ]]; then
					continue
				else
					named_="${element}"
				fi
				;;
		esac
	done <<< "${what}"
	
	unset what element
}

line_u(){
	local named_ directory_ optdirectory_ optdirectory_v uidgid optgid optgid_v optuid optuid_v comment_ optcomment optcomment_v

	check_args "${line}"
	
	if [[ -z "${directory_}" ]]; then
		optdirectory="-d"
		optdirectory_v="/"
	else
		optdirectory="-d"
		optdirectory_v="${directory_}"
	fi
	if [[ -z "${uidgid}" ]]; then
		optgid=""
		optgid_v=""
		optuid=""
		optuid_v=""
	else
		optgid="-g"
		optgid_v="${uidgid}"
		optuid="-u" 
		optuid_v="${uidgid}"
	fi
	if [[ -z "${comment_}" ]]; then
		optcomment=""
		optcomment_v=""
	else
		optcomment="-c" 
		optcomment_v="${comment_}"
	fi
	
	getent group ${named_} &>/dev/null
	if [[ $? -eq 0 ]]; then
		echo_info " group ${named_} already exist, nothing to do"
	else
		echo_display " Creating group ${named_} with the option(s):"
		echo_display " ${optgid} ${optgid_v}" 
		groupadd -r "${optgid}" "${optgid_v}" "${named_}" || die " Impossible to create group ${named_}"
	fi
	
	getent passwd ${named_} &>/dev/null
	if [[ $? -eq 0 ]]; then
		echo_info " user ${named_} already exist, nothing to do"
	else
		echo_display " Creating user ${named_} with the option(s):"
		echo_display " ${optuid} ${optuid_v} ${optgid} ${optgid_v} ${optdirectory} ${optdirectory_v} ${optcomment} ${optcomment_v} -s /sbin/nologin"
		useradd -r "${optuid}" "${optuid_v}" "${optgid}" "${optgid_v}" "${optdirectory}" "${optdirectory_v}" "${optcomment}" "${optcomment_v}" -s /sbin/nologin "${named_}"	|| die " Impossible to create user ${named_}"
	fi
	
	unset named_ directory_ optdirectory_ optdirectory_v uidgid optgid optgid_v optuid optuid_v comment_ optcomment optcomment_v
}
line_g(){
	local uidgid optgid optgid_v optuid optuid_v named_
	
	check_args "${line}"
	
	if [[ -z "${uidgid}" ]]; then
		optgid=""
		optgid_v=""
		optuid=""
		optuid_v=""
	else
		optgid="-g"
		optgid_v="${uidgid}"
		optuid="-u" 
		optuid_v="${uidgid}"
	fi
	
	getent group ${named_} &>/dev/null
	if [[ $? -eq 0 ]]; then
		echo_info " group ${named_} already exist, nothing to do"
	else	
		echo_display " Creating group ${named_} with the option(s):"
		echo_display " ${optgid} ${optgid_v}"
		groupadd -r "${optgid}" "${optgid_v}" "${named_}" || die " Impossible to create group ${named_}"
	fi
	
	unset uidgid optgid optgid_v optuid optuid_v named_
}

line_m(){
	local named_g group_g uidgid optgid optgid_v optuid optuid_v directory_ optdirectory_ optdirectory_v comment_ optcomment optcomment_v
	
	check_args "${line}"
	
	if [[ -z "${directory_}" ]]; then
		optdirectory=""
		optdirectory_v=""
	else
		optdirectory="-d"
		optdirectory_v="${directory_}"
	fi
	
	if [[ -z "${uidgid}" ]]; then
		optgid=""
		optgid_v=""
		optuid=""
		optuid_v=""
	else
		optgid="-g"
		optgid_v="${uidgid}"
		optuid="-u" 
		optuid_v="${uidgid}"
	fi
	
	if [[ -z "${comment_}" ]]; then
		optcomment=""
		optcomment_v=""
	else
		optcomment="-c" 
		optcomment_v="${comment_}"
	fi
	
	getent group ${group_g} &>/dev/null
	if [[ $? -ne 0 ]]; then
		echo_info " group ${group_g} does not exist, create it"
		groupadd -r "${optgid}" "${optgid_v}" "${group_g}" || die " Impossible to create group ${group_g}"
	fi
	
	getent passwd ${named_g} &>/dev/null
	if [[ $? -ne 0 ]]; then
		echo_info " user ${named_g} does not exist, create it"
		echo useradd -r "${optuid}" "${optuid_v}" "${optgid}" "${optgid_v}" "${optdirectory}" "${optdirectory_v}" "${optcomment}" "${optcomment_v}" "${named_g}" || die " Impossible to create user ${named_g}"
	fi
	
	echo_display " Add user ${named_g} to group ${group_g}"
	gpasswd -a "${named_g}" "${group_g}" || die " Impossible to add ${named_g} to group ${group_g}"
	
	unset named_g group_g uidgid optgid optgid_v optuid optuid_v directory_ optdirectory_ optdirectory_v comment_ optcomment optcomment_v
}

line_r(){
	echo_info " Pacopts cannot parse the file ${path_file}/${named} for r line,"
	echo_info " you need to do it manually"
	break
}

##				TMPFILE FUNCTION

tmpfiles(){
	/usr/lib/obarun/tmpfiles.sh --create
}


## 				AUR FUNCTION

# ${1} command to pass to cower
# ${2} cower arguments to pass
cower_cmd(){
	local opts
	cmd="${1}"
	opts=( "${2}" )
	
	cower "${cmd}" ${opts[@]} || return 1
	
	unset opts
	
	return 0
}

manage_aur_download(){
	
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-d" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(info|msearch|search|update|install|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-d" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}

manage_aur_info(){
	
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-i" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|msearch|search|update|install|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-i" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}

manage_aur_msearch(){
	
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a maintainer name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-m" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|info|search|update|install|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-m" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}
manage_aur_search(){
	
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-s" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|info|msearch|update|install|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-s" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}
manage_aur_update(){
	
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a name or leave blank to see all installed packages > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-u" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|info|msearch|search|install|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-u" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}

manage_aur_install(){
	exit
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-u" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|info|msearch|search|update|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-u" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}

manage_aur_build(){
	exit
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: enter a name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-u" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|info|msearch|search|update|install)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-u" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}

manage_aur_help(){
	printf "\n"
	printf "%-15s\n" "The following command are available"
	printf "\n"
	printf "%-15s %-15s\n" "     download" "download a pkgbuild for a given package" >&1
	printf "%-15s %-15s\n" "     info" "get info for a given package" >&1
	printf "%-15s %-15s\n" "     msearch" "search for packages maintained by a given name" >&1
	printf "%-15s %-15s\n" "     search" "search for packages with a given name or regex pattern" >&1
	printf "%-15s %-15s\n" "     update" "check for updates for a given packages" >&1
}

# ${1} first pass or not : 0 for not, 1 for yes
# ${2} cower command or extra command e.g. install

manage_aur(){
	
	(( EUID != 0 )) || die " this part of the must be run without root privilegies" 
	
	if [[ -z "$COWER_CONFIG" ]]; then
		die " a configuration file for cower need to be present at ${COWER_CONFIG}"
	fi
	
	local cower_cmd _pass
	_pass="${1}"
	manage_cmd="${2}"
	
	if (( "${_pass}" )); then
		printf "\n"
		
		read -p "Manage :: please enter your command > " ans
		manage_cmd="${ans}"
	fi
	
	case $manage_cmd in
			@(d|download))
				manage_aur_download "download"
				;;
			@(i|info))
				manage_aur_info "info"
				;;
			@(m|msearch))
				manage_aur_msearch "msearch"
				;;
			@(s|search))
				manage_aur_search "search"
				;;
			@(u|update))
				manage_aur_update "update"
				;;
			@(in|install))
				manage_aur_install "install"
				;;
			@(b|build))
				manage_aur_build "build"
				;;
			*)
				manage_aur_help
				manage_aur 1
				;;
	esac
}

manage_aur_info(){
	
	local info named rc
	local -a parse_ans ans_args ans
	
	info="${1}"
	
	read -p "Manage ${info} :: please enter a name > " ans 
	printf "\n"
	named="${ans}"
	
	parse_ans=( "${ans[@]}" )
	ans_args=( "${parse_ans[@]:1}" )
	
	check_var(){
		echo parse_ans :: "${parse_ans[@]}"
		echo ans_args :: "${ans_args[@]}"
	}
	#check_var
	
	cower_cmd "-i" "${named} ${ans_args[@]}" 
	
	unset ans
	
	while true; do
		
		unset named
		
		printf "\n"
		
		read -p "Manage ${info} :: > " ans
		
		named="${ans}"
		
		printf "\n"
		
		case "${ans}" in
			@(download|msearch|search|update|install|build)) 
				rc=1
				break
				;;
			help)
				echo manage_aur_info_help :: display help for info command
				;;
			quit) 
				exit
				;;
			*) cower_cmd "-i" "${named} ${ans_args[@]}"
				;;
		esac
	done
	if (( $rc )); then
		manage_aur 0 "${ans}"
	fi
	
	unset info named rc parse_ans ans_args ans
}
