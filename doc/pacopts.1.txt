pacopts(1)
==========

Name
----
pacopts - system maintainer helper

Synopsis
--------
'pacopts' <operation> [ target ] [ arguments ]

Description
-----------
Pacopts is a  utility script written in bash which helps you to find the 
origin of the repositories for installed packages, to maintain the system
automatically for somes repetitives operations by wrapping
{sysusers,tmpfiles}.d coming from systemd and to maintain/manage AUR 
packages using Cower software. Also, It can help to find the associated 
s6/s6-rc services package with your installed packages.  

Operations
----------
*origin*::

	Check origin of 'arguments' as package(s) coming from a given 'target'
	where 'target' can be all repositories set in pacman.conf. If 'target'
	is empty, obarun repository is took by default. If 'arguments' is
	empty, all installed packages are checked from repositories set with
	'target'. Also, 'arguments' can be list of packages.
+
note : Pacman queries versions of packages; not the origin of packages.
For instance pacman won't know the origin of a identical package with 
the same  version on differents repositories. The version of packages, 
or a least the release, need to be different to let pacman to find the 
good package. For example, if you build a package from abs without 
changing the version/release, pacman will not find the origin repository
and obviously pacopts too.

*applysys*::
	
	Parse 'target' file where 'target' can be found at 
	/usr/lib/sysusers.d, /run/sysusers.d, /etc/sysusers.d. This is 
	operation use the applysys script. see man(1) applysys for more 
	details.

*applytmp*::
	
	This is a tmpfiles.d wrapper for file used by systemd to create
	directory at boot time. This operation doesn't accept any 'target'. 
	Pacopts call the script written by Robin H Johnson <robbat2@gentoo.org>
	which parse and apply all files found at /usr/lib/tmpfiles.d. 
	This operation is automatically made by s6-boot at the booting time.
	Pacopts provide an hook for pacman which run this operation 
	automatically at the package installation. This hook is installed at
	/usr/share/libalpm/hooks/applytmp.hook. If you do not want to let 
	pacman using this operation at package installation, just remove this
	file from your system.

*service*::
	
	Check if a service exist for a given 'target' where 'target' is the 
	name of the package to check. If 'target' is empty, all installed
	packages on the system will be checked.
	+
This 'operation' only return service(s) package which are not installed yet.
	+
'target' can be a list.
	
*aur*::
	Synopsis :
+
'pacopts' aur <operations> [ target ] [ arguments ]
+
Maintain/install package(s) coming from AUR. This operation *must be* 
run with normal user to avoid trouble on your system when a package is
builded. A file $HOME/.config/cower/config *must exist* even it empty.
This file can be a simple copy of /usr/share/doc/cower/config cower
configuration file. If the file doesn't exist, the script copy the
sample coming from cower at $HOME/.config/cower/config.
+
The script accept any extra 'arguments' coming from cower (see man cower) 
except for the command build, install and upgrade.However, to avoid
conflicts between pacopts options and cower options, the long options
*must be used* for cower. Short options for cower will not have any effects.
e.g :
+	
	pacopts aur -i retrovol --format=%D
	pacopts aur -i retrovol clipit --format=%D
+
The cower 'arguments' help can be called under the command info, search, 
msearch, download, update by entering --help.

Aur Operations
--------------
*-i, info*::
	
	Show information about package(s).

*-s, search*::
	
	Search package(s) in AUR repositories.

*-m, msearch*::
	
	Search for package(s) maintained by a named maintainer. This is a 
	synonym for searching with --by=maintainer.

*-d, download*::
	
	Download the PKGBUILD of the package(s). The working directory where
	the PKGBUILD is downloaded is set by the variable TargetDir at 
	$HOME/.config/cower/config file. If this variable is empty, /tmp is 
	picked by default.

*-u, update*::
	
	Check if a named package or a list of packages is/are out of date.
	If you leave the 'target' blank, the script check for all installed 
	package	on your system.

*-U, upgrade*::

	Download,build and install a named package or a list of packages if
	the package(s) is out of date. If you leave the 'target' blank, 
	the script do the same for all installed package on your system.

*-b, build*::
	
	Download the PKGBUILD of the package(s) then build it. 
	The AUR dependencies for the given package(s) is not checked. 
	The working directory where the PKGBUILD is downloaded is set by the
	variable TargetDir at $HOME/.config/cower/config file. If this 
	variable is empty, /tmp is picked by default.

*-I, install*::
	
	Download, build and install the given package(s). If a dependency 
	coming from AUR is detected, the script run again the same scheme 
	(download, build, install) for the dependency. This system is done 
	recursively to find any AUR dependencies for the main package(s).

Files
-----
/etc/obarun/pacopts.conf
	Configuration files for pacopts.

$HOME/.config/cower/config
	Configuration files for cower. This file is a simple copy of
	/usr/share/doc/cower/config. It can be empty too but it need to be
	present.

See Also
--------
*applysys*(1)

Authors
-------
Eric Vidal <eric@obarun.org>
